package com.tutorial.article.entity;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.util.ArrayList;
import java.util.List;
import org.bson.codecs.pojo.annotations.BsonProperty;
import org.springframework.data.mongodb.core.mapping.Document;


import jakarta.annotation.Generated;

/**
 * Generated by MongoDB Relational Migrator
 * https://www.mongodb.com/products/relational-migrator
 * Collection: authors
 * Language: Java
 * Template: Spring Data
 * Generated on 2025-01-22
 */
@JsonTypeName("authors")
@Generated(value = "com.mongodb.migrator.application.codegen.config.java.JavaSpringCodegenConfig", date = "2025-01-22T20:18:00.307687+05:30[Asia/Kolkata]", comments = "Generator version: 7.9.0")@Document("authors")
public class AuthorsEntity {

  @BsonProperty("_id")
  private Integer id;

  @BsonProperty("name")
  private String name;

  @BsonProperty("sanitizedName")
  private String sanitizedName;

  @BsonProperty("bio")
  private String bio;

  @BsonProperty("books")

  private List<String> books = new ArrayList<>();

  @BsonProperty("aliases")
  
  private List<String> aliases = new ArrayList<>();

  public AuthorsEntity id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  
  @JsonProperty("_id")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public AuthorsEntity name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  
  @JsonProperty("name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AuthorsEntity sanitizedName(String sanitizedName) {
    this.sanitizedName = sanitizedName;
    return this;
  }

  /**
   * Get sanitizedName
   * @return sanitizedName
   */

  @JsonProperty("sanitizedName")
  public String getSanitizedName() {
    return sanitizedName;
  }

  public void setSanitizedName(String sanitizedName) {
    this.sanitizedName = sanitizedName;
  }

  public AuthorsEntity bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * Get bio
   * @return bio
   */

  @JsonProperty("bio")
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }

  public AuthorsEntity books(List<String> books) {
    this.books = books;
    return this;
  }

  public AuthorsEntity addBooksItem(String booksItem) {
    if (this.books == null) {
      this.books = new ArrayList<>();
    }
    this.books.add(booksItem);
    return this;
  }

  /**
   * Get books
   * @return books
   */

  @JsonProperty("books")
  public List<String> getBooks() {
    return books;
  }

  public void setBooks(List<String> books) {
    this.books = books;
  }

  public AuthorsEntity aliases(List<String> authorAliases) {
    this.aliases = authorAliases;
    return this;
  }

  public AuthorsEntity addAuthorAliasesItem(String authorAliasesItem) {
    if (this.aliases == null) {
      this.aliases = new ArrayList<>();
    }
    this.aliases.add(authorAliasesItem);
    return this;
  }

  /**
   * Get authorAliases
   * @return authorAliases
   */
  
  @JsonProperty("aliases")
  public List<String> getAuthorAliases() {
    return aliases;
  }

  public void setAuthorAliases(List<String> authorAliases) {
    this.aliases = authorAliases;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorsEntity authors = (AuthorsEntity) o;
    return Objects.equals(this.id, authors.id) &&
        Objects.equals(this.name, authors.name) &&
        Objects.equals(this.sanitizedName, authors.sanitizedName) &&
        Objects.equals(this.bio, authors.bio) &&
        Objects.equals(this.books, authors.books) &&
        Objects.equals(this.aliases, authors.aliases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, sanitizedName, bio, books, aliases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorsEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sanitizedName: ").append(toIndentedString(sanitizedName)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    books: ").append(toIndentedString(books)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

